name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build libcue bridge
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Check formatting
      run: cargo fmt -- --check
      if: matrix.rust == 'stable'
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
      if: matrix.rust == 'stable'

  coverage:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: cargo tarpaulin --out Xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./cobertura.xml
        fail_ci_if_error: false

  release:
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: darwin-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create archive
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/cuenv dist/
        cp README.md LICENSE dist/
        tar -czf cuenv-${{ matrix.suffix }}.tar.gz -C dist .
    
    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: cuenv-${{ matrix.suffix }}
        path: cuenv-${{ matrix.suffix }}.tar.gz