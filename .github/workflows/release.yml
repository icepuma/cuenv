name: Release
on:
  push:
    tags:
      - '*.*.*' # Match semantic version tags like 0.3.1
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., 0.3.1)'
        required: true
        type: string
jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-14
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Get version from Cargo.toml
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
          
          # Verify tag matches Cargo.toml version if this is a tag push
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            TAG_VERSION="${{ github.ref_name }}"
            if [[ "$TAG_VERSION" != "$VERSION" ]]; then
              echo "Error: Tag version ($TAG_VERSION) does not match Cargo.toml version ($VERSION)"
              exit 1
            fi
          fi
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          
      - name: Build
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.target }}
          
      - name: Package (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          tar czf ../../../cuenv-${VERSION}-${{ matrix.target }}.tar.gz cuenv
          cd ../../../
          echo "ASSET_PATH=cuenv-${VERSION}-${{ matrix.target }}.tar.gz" >> $GITHUB_ENV
          
      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd target/${{ matrix.target }}/release
          $VERSION = "${{ steps.get_version.outputs.VERSION }}"
          Compress-Archive -Path cuenv.exe -DestinationPath ../../../cuenv-$VERSION-${{ matrix.target }}.zip
          cd ../../../
          echo "ASSET_PATH=cuenv-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.zip" >> $env:GITHUB_ENV
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cuenv-${{ matrix.target }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Display artifacts
        run: ls -R artifacts/
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: v${{ steps.get_version.outputs.VERSION }}
          files: artifacts/**/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}